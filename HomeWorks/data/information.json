{
    "response": {
        "response": {
            "body": {
                "response": "тип данных свойства response представляет собой JavaScript объект ArrayBuffer, содержащий двоичные данные. Тип данных свойства response представляет собой JavaScript объект Blob, содержащий двоичные данные."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/API/Response"
        },

        "fetch": {
            "body": {
                "fetch": "это XMLHttpRequest нового поколения. Он предоставляет улучшенный интерфейс для осуществления запросов к серверу: как по части возможностей и контроля над происходящим, так и по синтаксису, так как построен на промисах.",
                "fetch API": "предоставляет интерфейс JavaScript для работы с запросами и ответами HTTP. Он также предоставляет глобальный метод fetch() (en-US), который позволяет легко и логично получать ресурсы по сети асинхронно."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/API/Fetch_API/Using_Fetch"
        },

        "async": {
            "body": {
                "async function": "определяет <i>асинхронную функцию</i>.",
                "async": "может содержать выражение await, которое приостанавливает выполнение функции async и ожидает ответа от переданного Promise, затем возобновляя выполнение функции async и возвращая полученное значение.",
                "":"- - - - - - - - - - - - -",
                "async/await":"упрощает использование <b>promises</b> синхронно и воспроизвести некоторое действие над группой Promises. Точно так же как Promises подобны структурированным колбэкам, async/await подобна комбинации генераторов и promises."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/async_function"
        },

        "await": {
            "body": {
                "await": "используется для ожидания окончания Promise. Может быть использован только внутри async function, допустимо только в асинхронных функциях. В другом контексте вы получите ошибку <i>SyntaxError</i>.",
                "Оператор await": "заставляет функцию, объявленную с использованием оператора <b>async</b>, ждать выполнения <b>Promise</b> и продолжать выполнение после возвращения Promise значения.",
                "":"- - - - - - - - - - - - -",
                "async/await":"упрощает использование <b>promises</b> синхронно и воспроизвести некоторое действие над группой Promises. Точно так же как Promises подобны структурированным колбэкам, async/await подобна комбинации генераторов и promises."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/await"
        },

        "try": {
            "body": {
                "try": "содержит блок try, в котором находится одна или несколько инструкций (Блок {} обязательно должен присутствовать, даже если выполняется всего одна инструкция)",
                "":"- - - - - - - - - - - - -",
                "try / catch": " это специальная инструкция из двух блоков, которая позволяет перехватить все исключения и их обработать. Любые исключения, которые будут выброшены кодом, расположенным внутри этого блока, будут <b>перехвачены</b> и переданы во второй блок. Если ошибки не было, то этот блок пропускается."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/try...catch"
        },

        "catch": {
            "body": {
                "catch": "содержит инструкции, которые будут выполнены, если в блоке try произошла <b>ошибка</b>. Если любая инструкция в блоке try выбрасывает исключение, то управление сразу же переходит в блок catch. Если в блок try не было выброшено исключение, то блок catch <b>не выполняется</b>.",
                "":"- - - - - - - - - - - - -",
                "try / catch": " это специальная инструкция из двух блоков, которая позволяет перехватить все исключения и их обработать. Любые исключения, которые будут выброшены кодом, расположенным внутри этого блока, будут <b>перехвачены</b> и переданы во второй блок. Если ошибки не было, то этот блок пропускается."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/try...catch"
        }
    },
    "classList": {
        "classList": {
            "body": {
                "classList": "содержит методы, которые позволяют управлять списком классов элемента. Это свойство доступно только для элементов, созданных с помощью функции <b>createElement()</b>."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/API/Element/classList"
        },
        "add": {
            "body": {
                "add": "позволяет добавлять класс в список классов элемента."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/API/Element/classList"
        },
        "remove": {
            "body": {
                "remove": "позволяет удалять класс из списка классов элемента."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/API/Element/classList"
        },
        "toggle": {
            "body": {
                "toggle ": "позволяет изменять состояние класса элемента."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/API/Element/classList"
        },
        "contains": {
            "body": {
                "contains": "позволяет проверить, содержится ли класс в списке классов элемента."
            },
            "URL": "https://developer.mozilla.org/ru/docs/Web/API/Element/classList"
        }
    }
}